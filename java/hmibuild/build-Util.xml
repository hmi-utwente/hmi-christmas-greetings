<?xml version="1.0" encoding="UTF-8"?>
<project name="Util"  
         xmlns:ac="antlib:net.sf.antcontrib"  
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:hmi="antlib:hmi.ant">
  <!--xmlns:tigris="antlib:org.tigris.subversion.svnant"-->
   <description>Some common initialization and utils</description>
   
   
   <macrodef name="delegate">
      <attribute name="target"/>
      <attribute name="list" default="rebuildList"/>
      <attribute name="verbose" default="false"/>
      <sequential>
         <!--echo message="delegate"/-->
         <subant target="@{target}" verbose="@{verbose}" inheritall="false">
           <filelist refid="@{list}"/>
        </subant>
      </sequential>
   </macrodef>
   
   
  
  
  
    <target name ="-init.dirs">  
      <!-- Removed this directory creation (Shouldn't they already exist, if desired?)
       <mkdir dir="${src.dir}"      />
       <mkdir dir="${lib.dir}"      />
       <mkdir dir="${test.dir}"      />
      -->
    </target>  
  
  
   <target name="-init.build.properties" unless="properties.file.available">
       <echo message="Init ${properties.file}"/>
       <copy file="${shared.template.dir}/build.properties-template" tofile="${properties.file}"/>
   </target>
 
   <target name="checkVersion">
     <antversion property="version.running" />
        <fail message="FATAL ERROR:  The running Ant version, ${version.running}, is too old, required version ${ant.version.required}.">
        <condition>
            <not>
                <antversion atleast="${ant.version.required}" />
            </not>
        </condition>
        </fail>
   </target>
   <target name="init" depends="checkVersion">
      
   </target>
   
   <available file="${main.class.file}" property="main.class.file.available" />
   
   <target name="-init.main.class.file" unless="main.class.file.available">   
      <mkdir dir="${private.properties.dir}"/>
      <echo file="${main.class.file}" message="run.main.class=none"/>
      <echo message="main.class file added to project${line.separator} "/>
   </target> 

 
   <target name="main" depends="init, -init.main.class.file, -findmain" description="Show and Set the main class for &quot;run&quot;">
       <property name="run.main.class" value="${main.class.prop}"/>
       <echo message="Current main class: ${run.main.class}${line.separator} "/>
       <input
         message="New main class? ${line.separator}&lt;Return&gt; : keep ${run.main.class} ${line.separator}Choice:"
         addproperty="new.main.class"
         validargs="${main.list}"
         defaultvalue="${run.main.class}"
       />
       
        <ac:propertyregex property="new.main.class.escaped" input="${new.main.class}" regexp="\\" replace="/"
              casesensitive="true" defaultValue="${new.main.class}"/>
       <echo file="${main.class.file}" message="run.main.class=${new.main.class.escaped}"/>
   </target>
   
   
   <target name="dist" depends="init, jar" description="Alias for jar target (language-independent naming)"/>
   
   
   <!--target name="checkmain"  unless="run.main.class" description="Check for main class">
       <antcall target="-init.main.class.file" />
       <hmi:findmain mainclassprop="main.class.prop" mainpref="Info" mainlistprop="main.list">
          <fileset dir="${src.dir}" includes="**/*.java"/>
       </hmi:findmain>
       <property name="default.main.class" value="${main.class.prop}"/>
         
       <input
         message="Give the main class (including package name)? ${line.separator}Default:  ${default.main.class} ${line.separator}Choice:"
         addproperty="run.main.class"
         validargs="${main.list}"
         defaultvalue="${default.main.class}"
      />
      <replaceregexp file="${main.class.file}"  match="^run.main.class.*"  replace="run.main.class=${run.main.class}" byline="true"  /> 
   </target-->   
      
   
   
  <!-- *************************************************************** --><!--   Set-Up of SVN-ANT classpath                                   -->
  <!-- *************************************************************** -->  
   <!--path id="svnant.classpath"> 
      <fileset dir="${shared.ant.dir}/svnant">     
         <include name="**/*.jar" /> 
      </fileset>
   </path>
  
   <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" uri="antlib:org.tigris.subversion.svnant" classpathref="svnant.classpath" /-->
   
  
   
   <typedef resource="hmi/ant/antlib.xml" uri="antlib:hmi.ant">
      <classpath>
         <fileset dir="${shared.ant.dir}">
            <include name="HmiAnt-*.jar"/>
         </fileset>    
      </classpath>
   </typedef>  
   
   
   <ac:if>
      <os family="windows"/>
   <ac:then>
      <ac:var name="os32" value="win32"/>
      <ac:var name="os64" value="win64"/>
   </ac:then>
   </ac:if>
   
   <ac:if>
      <os family="unix"/>
   <ac:then>
      <ac:var name="os32" value="linux32"/>
      <ac:var name="os64" value="linux64"/>
   </ac:then>
   </ac:if>
   
   <ac:if>
      <os family="mac"/>
   <ac:then>
      <ac:var name="os32" value="mac32"/>
      <ac:var name="os64" value="mac64"/>
   </ac:then>
   </ac:if>
   
   
   <ac:if>
      <or> <os arch="x86"/> <os arch="i386"/> </or>
   <ac:then>
      <!-- echo message="32bits arch"/-->
      <ac:var name="bits" value="32"/>
   </ac:then>
   <ac:else> <ac:if>
                <or> <os arch="amd64"/>  <os arch="x86_64"/>  </or>
             <ac:then>
               <!-- echo message="64bits arch"/-->
               <ac:var name="bits" value="64"/>
             </ac:then>
             <ac:else>
                <echo message="unknown arch"/>
                <ac:var name="bits" value="32"/>
             </ac:else>
             </ac:if>
             
   </ac:else>
   </ac:if>
   
   <ac:if>
      <equals arg1="${bits}" arg2="32" />
   <ac:then>
      <ac:var name="os" value="${os32}" />
   </ac:then>
   <ac:else>
      <ac:var name="os" value="${os64}" />
   </ac:else>
   </ac:if>
   
         

</project>

  




  
   

